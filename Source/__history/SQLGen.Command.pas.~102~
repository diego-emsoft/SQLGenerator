unit SQLGen.Command;

interface

uses
  SQLGen.Command.interfaces, System.SysUtils, System.Rtti,
  System.Generics.Collections;

type
  TCommand<T: class, constructor> = class(TInterfacedObject, iCommand<T>)
  private
    FEntity: T;
    FListEntity: TObjectList<T>;
    FDisplay: string;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: iCommand<T>;
    function Insert(aEntity: T): T;
    function Update(aEntity: T): T;
    function Find: TObjectList<T>; overload;
    function Find(aID: Integer): T; overload;
    function Delete(aEntity: T): T; overload;
    function Delete(aID: Integer): T; overload;
    function Associations(aEntity: T): TObjectList<T>;
    function Display: string;
  end;

implementation

{ TCommand<T> }

{ TODO 6 -cCREATE -oDiego: Find with associations SQL}
function TCommand<T>.Associations(aEntity: T): TObjectList<T>;
var
  aContexto: TRttiContext;
  aTipo, aSubTipo: TRttiType;
  aField, aSubField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(aEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'SELECT ';

    for aField in aTipo.GetFields do
    begin
      FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + ', ';

      if aField.GetValue(Pointer(aEntity)).IsObject then
      begin

        aTableName := aField.GetValue(Pointer(aEntity)).AsClass.ClassName;

        aSubTipo := aContexto.GetType(aField.FieldType.ClassInfo);

        aTableName := aSubTipo.Name;
//        QuotedStr(aField.GetValue(Pointer(aEntity)).ToString)

//        for aSubField in aSubTipo.GetFields do
//        begin
//           FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + ', ';
//        end;
      end;
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);

    FDisplay := FDisplay + ' FROM ' + aTableName;

    Result := FListEntity;
  finally
    aContexto.Free;
  end;
end;

constructor TCommand<T>.Create;
begin
  FListEntity := TObjectList<T>.Create;
  FEntity := T.Create;
end;

{ DONE 3 -cCREATE -oDiego: Create a DELETE SQL}
function TCommand<T>.Delete(aEntity: T): T;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(aEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'DELETE ';

    FDisplay := FDisplay + ' FROM ' + aTableName;

    for aField in aTipo.GetFields do
    begin
      if aField.Name = 'FID' then
      begin
        FDisplay := FDisplay + ' WHERE ID=' + aField.GetValue(Pointer(aEntity)).ToString;
        Break;
      end;
    end;

    Result := FEntity;
  finally
    aContexto.Free;
  end;
end;

{ DONE 4 -cCREATE -oDiego: Create a DELETE by ID SQL}
function TCommand<T>.Delete(aID: Integer): T;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(FEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'DELETE ';

    FDisplay := FDisplay + ' FROM ' + aTableName;

    for aField in aTipo.GetFields do
    begin
      if aField.Name = 'FID' then
      begin
        FDisplay := FDisplay + ' WHERE ID=' + aID.ToString;
        Break;
      end;
    end;

    Result := FEntity;
  finally
    aContexto.Free;
  end;
end;

destructor TCommand<T>.Destroy;
begin
  FreeAndNil(FEntity);
  FreeAndNil(FListEntity);
  inherited;
end;

function TCommand<T>.Display: string;
begin
  Result := FDisplay;
end;


   { DONE 1 -cCREATE -oDiego: Create a Select by ID SQL}
function TCommand<T>.Find(aID: Integer): T;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
//INSERT INTO USER (id, name, born) VALUES (null, "Diego","1987-03-03")
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(FEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'SELECT ';

    for aField in aTipo.GetFields do
    begin
      FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + ', ';
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);

    FDisplay := FDisplay + ' FROM ' + aTableName;

    FDisplay := FDisplay + ' WHERE ID=' + aID.ToString;

    Result := FEntity;
  finally
    aContexto.Free;
  end;
end;

function TCommand<T>.Insert(aEntity: T): T;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(aEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'INSERT INTO ' + aTableName + ' (';

    for aField in aTipo.GetFields do
    begin
      FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + ', ';
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);

    FDisplay := FDisplay + ') VALUES (';

    for aField in aTipo.GetFields do
    begin
      if aField.FieldType.ToString.ToUpper = 'INTEGER' then
        if StrToInt(aField.GetValue(Pointer(aEntity)).ToString) < 1 then
          FDisplay := FDisplay + 'Null, '
        else
          FDisplay := FDisplay + aField.GetValue(Pointer(aEntity)).ToString + ', ';

      if aField.FieldType.ToString.ToUpper = 'STRING' then
        FDisplay := FDisplay + QuotedStr(aField.GetValue(Pointer(aEntity)).ToString) + ', ';

      if aField.FieldType.ToString.ToUpper = 'TDATE' then
        FDisplay := FDisplay + QuotedStr(FormatDateTime('yyyy-mm-dd', StrToDate(aField.GetValue(Pointer(aEntity)).ToString))) + ', ';
//      FDisplay := FDisplay + aField.FieldType.ToString + ',';
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);
    FDisplay := FDisplay + ')';

    Result := FEntity;
  finally
    aContexto.Free;
  end;
end;

class function TCommand<T>.New: iCommand<T>;
begin
  Result := Self.Create;
end;

  { DONE 1 -cCREATE -oDiego: Create a Select SQL}
function TCommand<T>.Find: TObjectList<T>;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(FEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'SELECT ';

    for aField in aTipo.GetFields do
    begin
      FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + ', ';
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);

    FDisplay := FDisplay + ' FROM ' + aTableName;

    Result := FListEntity;
  finally
    aContexto.Free;
  end;
end;

{ DONE 5 -cCREATE -oDiego: Create a UPDATE SQL}
function TCommand<T>.Update(aEntity: T): T;
var
  aContexto: TRttiContext;
  aTipo: TRttiType;
  aField: TRttiField;
  aTableName: string;
begin
  aContexto := TRttiContext.Create;
  try
    aTipo := aContexto.GetType(aEntity.ClassInfo);

    aTableName := aTipo.Name;

    aTableName := Copy(aTableName, Pos('T', aTableName) + 1, Length(aTableName));

    FDisplay := 'UPDATE ' + aTableName + ' SET ';

    for aField in aTipo.GetFields do
    begin
      if aField.Name = 'FID' then
      begin
        Continue;
      end;

      if aField.FieldType.ToString.ToUpper = 'INTEGER' then
        if StrToInt(aField.GetValue(Pointer(aEntity)).ToString) < 1 then
          FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + '=' + 'Null, '
        else
          FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + '=' + aField.GetValue(Pointer(aEntity)).ToString + ', ';

      if aField.FieldType.ToString.ToUpper = 'STRING' then
        FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + '=' + QuotedStr(aField.GetValue(Pointer(aEntity)).ToString) + ', ';

      if aField.FieldType.ToString.ToUpper = 'TDATE' then
        FDisplay := FDisplay + Copy(aField.Name, Pos('F', aField.Name) + 1, Length(aField.Name)) + '=' + QuotedStr(FormatDateTime('yyyy-mm-dd', StrToDate(aField.GetValue(Pointer(aEntity)).ToString))) + ', ';
//      FDisplay := FDisplay + aField.FieldType.ToString + ',';
    end;

    FDisplay := Copy(FDisplay, 0, Length(FDisplay) - 2);

    for aField in aTipo.GetFields do
    begin
      if aField.Name = 'FID' then
      begin
        FDisplay := FDisplay + ' WHERE ID=' + aField.GetValue(Pointer(aEntity)).ToString;
        Break;
      end;
    end;

    Result := FEntity;
  finally
    aContexto.Free;
  end;
end;

end.

